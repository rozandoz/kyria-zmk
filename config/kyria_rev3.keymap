/*
 * Copyright (c) 2023 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Uncomment this block if using RGB
&led_strip {
    chain-length = <6>;
    // chain-length = <31>; // Uncomment if using both per-key and underglow LEDs
    // chain-length = <25>; // Uncomment if using only per-key LEDs.
};
 */

/ {
    behaviors {
        caps_lock: caps_lock {
            compatible = "zmk,behavior-hold-tap";
            label = "CAPS_LOCK";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "balanced";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                                          |  Y   |  U    |  I    |  O   |   P   |   \  |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                                          |  H   |  J    |  K    |  L   |   ;   |   '  |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   | L SHIFT | L SHIFT |  | LAYER 1 | L SHIFT |  N   |  M    |  ,    |  .   |   /   | CTRL |
            //                     | GUI  | DEL  | RET  |  SPACE  |   ESC   |  |   RET   |  SPACE  | TAB  | BSPC  | R-ALT |

            bindings = <
&kp TAB                         &kp Q  &kp W  &kp F         &kp P  &kp B                                                                    &kp J      &kp L  &kp U      &kp Y    &kp SEMI  &kp BSLH
&caps_lock LEFT_CONTROL ESCAPE  &kp A  &kp R  &kp S         &kp T  &kp G                                                                    &kp M      &kp N  &kp E      &kp I    &kp O     &kp SQT
&kp LSHFT                       &kp Z  &kp X  &kp C         &kp D  &kp V          &kp LEFT_BRACKET  &trans      &mo 2    &kp RIGHT_BRACKET  &kp K      &kp H  &kp COMMA  &kp DOT  &kp FSLH  &kp RSHFT
                                              &kp LEFT_ALT  &mo 1  &kp BACKSPACE  &kp LEFT_SHIFT    &kp DELETE  &kp RET  &kp RSHFT          &kp SPACE  &mo 1  &kp RGUI
            >;
        };

        down_layer {
            bindings = <
&kp F1        &kp F2      &kp F3         &kp F4        &kp F5         &kp F6                                         &kp F7        &kp F8        &kp F9        &kp F10       &kp F11        &kp F12
&kp N1        &kp N2      &kp N3         &kp N4        &kp N5         &kp N6                                         &kp N7        &kp N8        &kp N9        &kp N0        &kp MINUS      &kp EQUAL
&kp LS(EXCL)  &kp LS(AT)  &kp LS(POUND)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &trans  &trans  &trans  &trans  &kp LS(AMPS)  &kp LS(STAR)  &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(UNDER)  &kp LS(PLUS)
                                         &trans        &trans         &trans         &trans  &trans  &trans  &trans  &trans        &trans        &trans
            >;
        };

        function_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |       |      |BT_CLR|BTSEL0|BTSEL1|BTSEL2|                                         |      |      |      |      |      |      |
            // |       |      |      |BTSEL3|BTSEL4|      |                                         |      |      |      |      |      |      |
            // |       |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |      |
            //                       |      |      |      |      |      |      |      |      |      |      |      |      |

            bindings = <
&trans  &trans  &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &bt BT_SEL 3  &bt BT_SEL 4  &trans                                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans      &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                            &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
